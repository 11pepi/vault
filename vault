#!/bin/python3
# pylint: disable=import-outside-toplevel
'''
The package manager's main executable
'''
import argparse
import logging
import windows  # pylint: disable=unused-import

def add_pkgsource_to_parser(parser):
    '''
    Add package sources to parser
    '''
    #group = parser.add_mutually_exclusive_group(required=True)
    #group.add_argument("--remote", "-r", action="store_true")
    #group.add_argument("--directory", "-d", action="store_true")
    #return group
    return None

def common_pkg_args(parser):
    '''
    A set of common args for operating on packages
    '''
    parser.add_argument("--recursive", "-R", action="store_true")
    return parser

root_parser = argparse.ArgumentParser(
    prog="vault",
    formatter_class=argparse.RawTextHelpFormatter
)
root_parser.add_argument("--prefix", default="/global/vaultpkgs/db")
root_parser.add_argument("--loglevel", default="INFO")

command_subparsers = root_parser.add_subparsers(dest="operation", required=True)

########## get command
get_parser = command_subparsers.add_parser("get")
add_pkgsource_to_parser(get_parser)
get_parser.add_argument("package")
common_pkg_args(get_parser)

########## bye command
bye_parser = command_subparsers.add_parser("bye")
bye_parser.add_argument("package")
add_pkgsource_to_parser(bye_parser)
common_pkg_args(bye_parser)

########## fix command
#fix_parser = command_subparsers.add_parser("fix")
#fix_parser.add_argument("package")
#common_pkg_args(fix_parser)

########## setup command
setup_parser = command_subparsers.add_parser("setup")

########## arson, setup command's evil sister
arson_parser = command_subparsers.add_parser("arson")

args = root_parser.parse_args()

logging.basicConfig(
    level=args.loglevel,
    format="%(asctime)s │ %(name)10.10s │ %(funcName)12.12s │ %(levelname)-6s %(message)s",
    datefmt="%Y %j @ %H:%m:%S",
)

log = logging.getLogger(__name__)

def cmd_setup():
    '''
    set up the db
    '''
    import setup  # os.system is very unsafe!
    setup.setup()

def cmd_arson():
    '''
    arson the whole db
    '''
    import setup  # safer
    setup.arson()  # I think this is what you wanted it to do??

def cmd_get(arguments):
    '''
    get a package
    '''
    log.info("Attempt to get %s", arguments.package)
    import pkginstall
    pkginstall.start(
        arguments.package,
        arguments.prefix,
        recursive=args.recursive
    )

def cmd_bye(arguments):
    '''
    delete a package
    '''
    log.info("Attempt to remove %s", args.package)
    import pkgremove
    pkgremove.start(
        arguments.package,
        arguments.prefix,
        recursive=arguments.recursive
    )

def operation_not_supported(reason: str = "(no reason given)"):
    '''
    Called when an operation is not supported
    '''
    log.critical("operation not supported. Reason: %s", reason)
    quit(127)

match args.operation:
    case "setup": cmd_setup()
    case "arson": cmd_arson()
    case "get": cmd_get(args)
    case "bye": cmd_bye(args)
    case "fix": cmd_fix(args)
    case "what": operation_not_supported("what is not yet implemented, but is planned")
    case "has": operation_not_supported("has is not yet implemented, but is planned")
    case "miku": print("Miku, miku, you can call me miku.")
